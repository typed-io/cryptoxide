//! ChaCha20 Stream Cipher
//!
//! Implementation of [ChaCha spec](https://www.rfc-editor.org/info/rfc7539)
//! which is a fast and lean stream cipher.
//!
//! The maximum amount of data to be processed by a single instance of a ChaCha
//! Context, is 256Gb (due to the 32 bits counter). Note that this is not
//! enforced by the context, and using a context to process more than 256Gb of
//! data would be insecure.
//!
//! Along with the standard IETF ChaCha, there is support for the
//! original ChaCha (with 64 bits counter) and
//! XChaCha variant with extended 192 bits nonce and 64 bits counter.
//!
//! Note that with stream cipher, there's only one operation [`ChaCha20::process`]
//! instead of the typical encrypt and decrypt.
//!
//! # Variants
//!
//! Multiple variations of Chacha exists with subtle variations in what they do.
//! The original version of chacha supports 64 bits counter and 64 bits nonce,
//! but the RFC7539 version only supports 32 bits counter and 96 bits nonce.
//!
//! # Examples
//!
//! Combine a simple input using a 128 bits key and 64 bit nonce:
//!
//! ```
//! use cryptoxide::chacha20::ChaCha20;
//!
//! let key : [u8; 16] = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
//! let nonce : [u8; 12] = [0,1,2,3,4,5,6,7,8,9,10,11];
//! let input : &[u8; 12] = b"hello world!";
//! let mut out : [u8; 12] = [0u8; 12];
//!
//! // create a new cipher
//! let mut cipher = ChaCha20::new(&key, &nonce);
//!
//! // encrypt the msg
//! cipher.process(input, &mut out);
//! ```
//!

use core::cmp;

use crate::chacha::ChaChaEngine as ChaChaState;
use crate::cryptoutil::xor_keystream_mut;

/// ChaCha Context (IETF Variant - RFC7539)
///
/// Note that the number of rounds is exposed here, and only the
/// value of 8, 12 and 20 are supported. any other values triggers
/// a runtime assertion.
///
/// If you don't know what rounds values to use, use 20 or the `Chacha20` type directly.
#[derive(Clone)]
pub struct ChaCha<const ROUNDS: usize> {
    state: ChaChaState<ROUNDS>,
    output: [u8; 64],
    offset: usize,
}

pub type ChaCha20 = ChaCha<20>;

impl<const ROUNDS: usize> ChaCha<ROUNDS> {
    /// Create a new ChaCha20 context.
    ///
    /// * The key must be 16 or 32 bytes
    /// * The nonce must be 12 bytes
    ///
    /// For using 8 bytes (64bits) nonces, uses `ChaChaOriginal`
    pub fn new(key: &[u8], nonce: &[u8; 12]) -> Self {
        assert!(key.len() == 16 || key.len() == 32);
        assert!(ROUNDS == 8 || ROUNDS == 12 || ROUNDS == 20);

        Self {
            state: ChaChaState::init(key, nonce),
            output: [0u8; 64],
            offset: 64,
        }
    }

    /// Seek the stream to a specific (64-bytes) block number
    pub fn seek(&mut self, position: u32) {
        self.state.set_counter(position);
        self.offset = 64;
    }

    // put the the next 64 keystream bytes into self.output
    fn update(&mut self) {
        let mut state = self.state.clone();
        state.rounds();
        state.add_back(&self.state);

        state.output_bytes(&mut self.output);

        self.state.increment();
        self.offset = 0;
    }

    /// Process the input in place through the cipher xoring
    ///
    /// To get only the stream of this cipher, one can just pass the zero
    /// buffer (X xor 0 = X)
    pub fn process_mut(&mut self, data: &mut [u8]) {
        let len = data.len();
        let mut i = 0;
        while i < len {
            // If there is no keystream available in the output buffer,
            // generate the next block.
            if self.offset == 64 {
                self.update();
            }

            // Process the min(available keystream, remaining input length).
            let count = cmp::min(64 - self.offset, len - i);
            xor_keystream_mut(&mut data[i..i + count], &self.output[self.offset..]);
            i += count;
            self.offset += count;
        }
    }

    /// Process the input through the cipher, xoring the byte one-by-one
    ///
    /// the output need to be the same size as the input otherwise
    /// this function will panic.
    pub fn process(&mut self, input: &[u8], output: &mut [u8]) {
        assert_eq!(
            input.len(),
            output.len(),
            "chacha::process need to have input and output of the same size"
        );
        output.copy_from_slice(input);
        self.process_mut(output);
    }
}

/// XChaCha Context
#[derive(Clone)]
pub struct XChaCha<const ROUNDS: usize> {
    state: ChaChaState<ROUNDS>,
    output: [u8; 64],
    offset: usize,
}

impl<const ROUNDS: usize> XChaCha<ROUNDS> {
    /// Create a new XChaCha20 context.
    ///
    /// Key must be 32 bytes and the nonce 24 bytes.
    pub fn new(key: &[u8; 32], nonce: &[u8; 24]) -> Self {
        assert!(ROUNDS == 8 || ROUNDS == 12 || ROUNDS == 20);

        // Use HChaCha to derive the subkey, and initialize a ChaCha<ROUNDS> instance
        // with the subkey and the remaining 8 bytes of the nonce.
        let mut hchacha = ChaChaState::<ROUNDS>::init(key, &nonce[0..16]);
        hchacha.rounds();
        let mut new_key = [0; 32];
        hchacha.output_ad_bytes(&mut new_key);

        let xchacha = XChaCha {
            state: ChaChaState::init(&new_key, &nonce[16..24]),
            output: [0u8; 64],
            offset: 64,
        };

        xchacha
    }

    /// Seek the stream to a specific (64-bytes) block number
    pub fn seek(&mut self, position: u32) {
        self.state.set_counter(position);
        self.offset = 64;
    }

    // put the the next 64 keystream bytes into self.output
    fn update(&mut self) {
        let mut state = self.state.clone();
        state.rounds();
        state.add_back(&self.state);

        state.output_bytes(&mut self.output);

        self.state.increment();
        self.offset = 0;
    }

    /// Process the input in place through the cipher xoring
    ///
    /// To get only the stream of this cipher, one can just pass the zero
    /// buffer (X xor 0 = X)
    pub fn process_mut(&mut self, data: &mut [u8]) {
        let len = data.len();
        let mut i = 0;
        while i < len {
            // If there is no keystream available in the output buffer,
            // generate the next block.
            if self.offset == 64 {
                self.update();
            }

            // Process the min(available keystream, remaining input length).
            let count = cmp::min(64 - self.offset, len - i);
            xor_keystream_mut(&mut data[i..i + count], &self.output[self.offset..]);
            i += count;
            self.offset += count;
        }
    }

    /// Process the input through the cipher, xoring the byte one-by-one
    ///
    /// the output need to be the same size as the input otherwise
    /// this function will panic.
    pub fn process(&mut self, input: &[u8], output: &mut [u8]) {
        assert_eq!(
            input.len(),
            output.len(),
            "chacha::process need to have input and output of the same size"
        );
        output.copy_from_slice(input);
        self.process_mut(output);
    }
}

/// ChaCha Context (Original version - Bernstein & co)
///
/// This variant has an 8 bytes nonce initializer, and an 8 bytes counter
///
/// Note that the number of rounds is exposed here, and only the
/// value of 8, 12 and 20 are supported. any other values triggers
/// a runtime assertion.
///
/// If you don't know what round values to use, use 20
#[derive(Clone)]
pub struct ChaChaOriginal<const ROUNDS: usize> {
    state: ChaChaState<ROUNDS>,
    output: [u8; 64],
    offset: usize,
}

impl<const ROUNDS: usize> ChaChaOriginal<ROUNDS> {
    /// Create a new ChaCha20 context.
    ///
    /// * The key must be 16 or 32 bytes
    /// * The nonce must be 8 bytes
    ///
    /// For using 12 bytes (96 bits) nonces, uses the IETF variant `ChaCha`
    pub fn new(key: &[u8], nonce: &[u8; 8]) -> Self {
        assert!(key.len() == 16 || key.len() == 32);
        assert!(ROUNDS == 8 || ROUNDS == 12 || ROUNDS == 20);

        Self {
            state: ChaChaState::init(key, nonce),
            output: [0u8; 64],
            offset: 64,
        }
    }

    // put the the next 64 keystream bytes into self.output
    fn update(&mut self) {
        let mut state = self.state.clone();
        state.rounds();
        state.add_back(&self.state);

        state.output_bytes(&mut self.output);

        // this is the only real subtle difference with IETF Chacha (along with initialization difference)
        self.state.increment64();
        self.offset = 0;
    }

    /// Process the input in place through the cipher xoring
    ///
    /// To get only the stream of this cipher, one can just pass the zero
    /// buffer (X xor 0 = X)
    pub fn process_mut(&mut self, data: &mut [u8]) {
        let len = data.len();
        let mut i = 0;
        while i < len {
            // If there is no keystream available in the output buffer,
            // generate the next block.
            if self.offset == 64 {
                self.update();
            }

            // Process the min(available keystream, remaining input length).
            let count = cmp::min(64 - self.offset, len - i);
            xor_keystream_mut(&mut data[i..i + count], &self.output[self.offset..]);
            i += count;
            self.offset += count;
        }
    }

    /// Process the input through the cipher, xoring the byte one-by-one
    ///
    /// the output need to be the same size as the input otherwise
    /// this function will panic.
    pub fn process(&mut self, input: &[u8], output: &mut [u8]) {
        assert_eq!(
            input.len(),
            output.len(),
            "chacha::process need to have input and output of the same size"
        );
        output.copy_from_slice(input);
        self.process_mut(output);
    }
}

#[cfg(test)]
mod test {
    use alloc::vec::Vec;
    use core::iter::repeat;

    use super::ChaCha20;
    use super::ChaChaOriginal;
    use super::XChaCha;

    #[test]
    fn test_chacha20_256_tls_vectors() {
        struct TestVector {
            key: [u8; 32],
            nonce: [u8; 8],
            keystream: &'static [u8],
        }
        // taken from http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-04
        let test_vectors = [
            TestVector {
                key: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                nonce: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                keystream: &[
                    0x76, 0xb8, 0xe0, 0xad, 0xa0, 0xf1, 0x3d, 0x90, 0x40, 0x5d, 0x6a, 0xe5, 0x53,
                    0x86, 0xbd, 0x28, 0xbd, 0xd2, 0x19, 0xb8, 0xa0, 0x8d, 0xed, 0x1a, 0xa8, 0x36,
                    0xef, 0xcc, 0x8b, 0x77, 0x0d, 0xc7, 0xda, 0x41, 0x59, 0x7c, 0x51, 0x57, 0x48,
                    0x8d, 0x77, 0x24, 0xe0, 0x3f, 0xb8, 0xd8, 0x4a, 0x37, 0x6a, 0x43, 0xb8, 0xf4,
                    0x15, 0x18, 0xa1, 0x1c, 0xc3, 0x87, 0xb6, 0x69, 0xb2, 0xee, 0x65, 0x86,
                ],
            },
            TestVector {
                key: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                ],
                nonce: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                keystream: &[
                    0x45, 0x40, 0xf0, 0x5a, 0x9f, 0x1f, 0xb2, 0x96, 0xd7, 0x73, 0x6e, 0x7b, 0x20,
                    0x8e, 0x3c, 0x96, 0xeb, 0x4f, 0xe1, 0x83, 0x46, 0x88, 0xd2, 0x60, 0x4f, 0x45,
                    0x09, 0x52, 0xed, 0x43, 0x2d, 0x41, 0xbb, 0xe2, 0xa0, 0xb6, 0xea, 0x75, 0x66,
                    0xd2, 0xa5, 0xd1, 0xe7, 0xe2, 0x0d, 0x42, 0xaf, 0x2c, 0x53, 0xd7, 0x92, 0xb1,
                    0xc4, 0x3f, 0xea, 0x81, 0x7e, 0x9a, 0xd2, 0x75, 0xae, 0x54, 0x69, 0x63,
                ],
            },
            TestVector {
                key: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                nonce: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01],
                keystream: &[
                    0xde, 0x9c, 0xba, 0x7b, 0xf3, 0xd6, 0x9e, 0xf5, 0xe7, 0x86, 0xdc, 0x63, 0x97,
                    0x3f, 0x65, 0x3a, 0x0b, 0x49, 0xe0, 0x15, 0xad, 0xbf, 0xf7, 0x13, 0x4f, 0xcb,
                    0x7d, 0xf1, 0x37, 0x82, 0x10, 0x31, 0xe8, 0x5a, 0x05, 0x02, 0x78, 0xa7, 0x08,
                    0x45, 0x27, 0x21, 0x4f, 0x73, 0xef, 0xc7, 0xfa, 0x5b, 0x52, 0x77, 0x06, 0x2e,
                    0xb7, 0xa0, 0x43, 0x3e, 0x44, 0x5f, 0x41, 0xe3,
                ],
            },
            TestVector {
                key: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                nonce: [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
                keystream: &[
                    0xef, 0x3f, 0xdf, 0xd6, 0xc6, 0x15, 0x78, 0xfb, 0xf5, 0xcf, 0x35, 0xbd, 0x3d,
                    0xd3, 0x3b, 0x80, 0x09, 0x63, 0x16, 0x34, 0xd2, 0x1e, 0x42, 0xac, 0x33, 0x96,
                    0x0b, 0xd1, 0x38, 0xe5, 0x0d, 0x32, 0x11, 0x1e, 0x4c, 0xaf, 0x23, 0x7e, 0xe5,
                    0x3c, 0xa8, 0xad, 0x64, 0x26, 0x19, 0x4a, 0x88, 0x54, 0x5d, 0xdc, 0x49, 0x7a,
                    0x0b, 0x46, 0x6e, 0x7d, 0x6b, 0xbd, 0xb0, 0x04, 0x1b, 0x2f, 0x58, 0x6b,
                ],
            },
            TestVector {
                key: [
                    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
                    0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
                    0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                ],
                nonce: [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07],
                keystream: &[
                    0xf7, 0x98, 0xa1, 0x89, 0xf1, 0x95, 0xe6, 0x69, 0x82, 0x10, 0x5f, 0xfb, 0x64,
                    0x0b, 0xb7, 0x75, 0x7f, 0x57, 0x9d, 0xa3, 0x16, 0x02, 0xfc, 0x93, 0xec, 0x01,
                    0xac, 0x56, 0xf8, 0x5a, 0xc3, 0xc1, 0x34, 0xa4, 0x54, 0x7b, 0x73, 0x3b, 0x46,
                    0x41, 0x30, 0x42, 0xc9, 0x44, 0x00, 0x49, 0x17, 0x69, 0x05, 0xd3, 0xbe, 0x59,
                    0xea, 0x1c, 0x53, 0xf1, 0x59, 0x16, 0x15, 0x5c, 0x2b, 0xe8, 0x24, 0x1a, 0x38,
                    0x00, 0x8b, 0x9a, 0x26, 0xbc, 0x35, 0x94, 0x1e, 0x24, 0x44, 0x17, 0x7c, 0x8a,
                    0xde, 0x66, 0x89, 0xde, 0x95, 0x26, 0x49, 0x86, 0xd9, 0x58, 0x89, 0xfb, 0x60,
                    0xe8, 0x46, 0x29, 0xc9, 0xbd, 0x9a, 0x5a, 0xcb, 0x1c, 0xc1, 0x18, 0xbe, 0x56,
                    0x3e, 0xb9, 0xb3, 0xa4, 0xa4, 0x72, 0xf8, 0x2e, 0x09, 0xa7, 0xe7, 0x78, 0x49,
                    0x2b, 0x56, 0x2e, 0xf7, 0x13, 0x0e, 0x88, 0xdf, 0xe0, 0x31, 0xc7, 0x9d, 0xb9,
                    0xd4, 0xf7, 0xc7, 0xa8, 0x99, 0x15, 0x1b, 0x9a, 0x47, 0x50, 0x32, 0xb6, 0x3f,
                    0xc3, 0x85, 0x24, 0x5f, 0xe0, 0x54, 0xe3, 0xdd, 0x5a, 0x97, 0xa5, 0xf5, 0x76,
                    0xfe, 0x06, 0x40, 0x25, 0xd3, 0xce, 0x04, 0x2c, 0x56, 0x6a, 0xb2, 0xc5, 0x07,
                    0xb1, 0x38, 0xdb, 0x85, 0x3e, 0x3d, 0x69, 0x59, 0x66, 0x09, 0x96, 0x54, 0x6c,
                    0xc9, 0xc4, 0xa6, 0xea, 0xfd, 0xc7, 0x77, 0xc0, 0x40, 0xd7, 0x0e, 0xaf, 0x46,
                    0xf7, 0x6d, 0xad, 0x39, 0x79, 0xe5, 0xc5, 0x36, 0x0c, 0x33, 0x17, 0x16, 0x6a,
                    0x1c, 0x89, 0x4c, 0x94, 0xa3, 0x71, 0x87, 0x6a, 0x94, 0xdf, 0x76, 0x28, 0xfe,
                    0x4e, 0xaa, 0xf2, 0xcc, 0xb2, 0x7d, 0x5a, 0xaa, 0xe0, 0xad, 0x7a, 0xd0, 0xf9,
                    0xd4, 0xb6, 0xad, 0x3b, 0x54, 0x09, 0x87, 0x46, 0xd4, 0x52, 0x4d, 0x38, 0x40,
                    0x7a, 0x6d, 0xeb, 0x3a, 0xb7, 0x8f, 0xab, 0x78, 0xc9,
                ],
            },
        ];

        for tv in test_vectors.iter() {
            let mut c = ChaChaOriginal::<20>::new(&tv.key, &tv.nonce);
            let input: Vec<u8> = repeat(0).take(tv.keystream.len()).collect();
            let mut output: Vec<u8> = repeat(0).take(input.len()).collect();
            c.process(&input[..], &mut output[..]);
            assert_eq!(output, tv.keystream);
        }
    }

    #[test]
    fn test_xchacha20_basic() {
        // There aren't any convenient test vectors for XChaCha/20,
        // so, a simple test case was generated using Andrew Moon's
        // chacha-opt library, with the key/nonce from test_salsa20_cryptopp().
        let key = [
            0x1b, 0x27, 0x55, 0x64, 0x73, 0xe9, 0x85, 0xd4, 0x62, 0xcd, 0x51, 0x19, 0x7a, 0x9a,
            0x46, 0xc7, 0x60, 0x09, 0x54, 0x9e, 0xac, 0x64, 0x74, 0xf2, 0x06, 0xc4, 0xee, 0x08,
            0x44, 0xf6, 0x83, 0x89,
        ];
        let nonce = [
            0x69, 0x69, 0x6e, 0xe9, 0x55, 0xb6, 0x2b, 0x73, 0xcd, 0x62, 0xbd, 0xa8, 0x75, 0xfc,
            0x73, 0xd6, 0x82, 0x19, 0xe0, 0x03, 0x6b, 0x7a, 0x0b, 0x37,
        ];
        let input = [0u8; 139];
        let mut stream = [0u8; 139];
        let result = [
            0x4f, 0xeb, 0xf2, 0xfe, 0x4b, 0x35, 0x9c, 0x50, 0x8d, 0xc5, 0xe8, 0xb5, 0x98, 0x0c,
            0x88, 0xe3, 0x89, 0x46, 0xd8, 0xf1, 0x8f, 0x31, 0x34, 0x65, 0xc8, 0x62, 0xa0, 0x87,
            0x82, 0x64, 0x82, 0x48, 0x01, 0x8d, 0xac, 0xdc, 0xb9, 0x04, 0x17, 0x88, 0x53, 0xa4,
            0x6d, 0xca, 0x3a, 0x0e, 0xaa, 0xee, 0x74, 0x7c, 0xba, 0x97, 0x43, 0x4e, 0xaf, 0xfa,
            0xd5, 0x8f, 0xea, 0x82, 0x22, 0x04, 0x7e, 0x0d, 0xe6, 0xc3, 0xa6, 0x77, 0x51, 0x06,
            0xe0, 0x33, 0x1a, 0xd7, 0x14, 0xd2, 0xf2, 0x7a, 0x55, 0x64, 0x13, 0x40, 0xa1, 0xf1,
            0xdd, 0x9f, 0x94, 0x53, 0x2e, 0x68, 0xcb, 0x24, 0x1c, 0xbd, 0xd1, 0x50, 0x97, 0x0d,
            0x14, 0xe0, 0x5c, 0x5b, 0x17, 0x31, 0x93, 0xfb, 0x14, 0xf5, 0x1c, 0x41, 0xf3, 0x93,
            0x83, 0x5b, 0xf7, 0xf4, 0x16, 0xa7, 0xe0, 0xbb, 0xa8, 0x1f, 0xfb, 0x8b, 0x13, 0xaf,
            0x0e, 0x21, 0x69, 0x1d, 0x7e, 0xce, 0xc9, 0x3b, 0x75, 0xe6, 0xe4, 0x18, 0x3a,
        ];

        let mut xchacha20 = XChaCha::<20>::new(&key, &nonce);
        xchacha20.process(&input, &mut stream);
        assert_eq!(stream, result);
    }

    #[test]
    fn test_chacha20_256_tls_vectors_96_nonce() {
        struct TestVector {
            key: [u8; 32],
            nonce: [u8; 12],
            keystream: &'static [u8],
        }
        // taken from http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-04
        let test_vectors = [
            TestVector {
                key: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                nonce: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                keystream: &[
                    0x76, 0xb8, 0xe0, 0xad, 0xa0, 0xf1, 0x3d, 0x90, 0x40, 0x5d, 0x6a, 0xe5, 0x53,
                    0x86, 0xbd, 0x28, 0xbd, 0xd2, 0x19, 0xb8, 0xa0, 0x8d, 0xed, 0x1a, 0xa8, 0x36,
                    0xef, 0xcc, 0x8b, 0x77, 0x0d, 0xc7, 0xda, 0x41, 0x59, 0x7c, 0x51, 0x57, 0x48,
                    0x8d, 0x77, 0x24, 0xe0, 0x3f, 0xb8, 0xd8, 0x4a, 0x37, 0x6a, 0x43, 0xb8, 0xf4,
                    0x15, 0x18, 0xa1, 0x1c, 0xc3, 0x87, 0xb6, 0x69, 0xb2, 0xee, 0x65, 0x86,
                ],
            },
            TestVector {
                key: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                ],
                nonce: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                keystream: &[
                    0x45, 0x40, 0xf0, 0x5a, 0x9f, 0x1f, 0xb2, 0x96, 0xd7, 0x73, 0x6e, 0x7b, 0x20,
                    0x8e, 0x3c, 0x96, 0xeb, 0x4f, 0xe1, 0x83, 0x46, 0x88, 0xd2, 0x60, 0x4f, 0x45,
                    0x09, 0x52, 0xed, 0x43, 0x2d, 0x41, 0xbb, 0xe2, 0xa0, 0xb6, 0xea, 0x75, 0x66,
                    0xd2, 0xa5, 0xd1, 0xe7, 0xe2, 0x0d, 0x42, 0xaf, 0x2c, 0x53, 0xd7, 0x92, 0xb1,
                    0xc4, 0x3f, 0xea, 0x81, 0x7e, 0x9a, 0xd2, 0x75, 0xae, 0x54, 0x69, 0x63,
                ],
            },
            TestVector {
                key: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                nonce: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                ],
                keystream: &[
                    0xde, 0x9c, 0xba, 0x7b, 0xf3, 0xd6, 0x9e, 0xf5, 0xe7, 0x86, 0xdc, 0x63, 0x97,
                    0x3f, 0x65, 0x3a, 0x0b, 0x49, 0xe0, 0x15, 0xad, 0xbf, 0xf7, 0x13, 0x4f, 0xcb,
                    0x7d, 0xf1, 0x37, 0x82, 0x10, 0x31, 0xe8, 0x5a, 0x05, 0x02, 0x78, 0xa7, 0x08,
                    0x45, 0x27, 0x21, 0x4f, 0x73, 0xef, 0xc7, 0xfa, 0x5b, 0x52, 0x77, 0x06, 0x2e,
                    0xb7, 0xa0, 0x43, 0x3e, 0x44, 0x5f, 0x41, 0xe3,
                ],
            },
            TestVector {
                key: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                nonce: [
                    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                ],
                keystream: &[
                    0xef, 0x3f, 0xdf, 0xd6, 0xc6, 0x15, 0x78, 0xfb, 0xf5, 0xcf, 0x35, 0xbd, 0x3d,
                    0xd3, 0x3b, 0x80, 0x09, 0x63, 0x16, 0x34, 0xd2, 0x1e, 0x42, 0xac, 0x33, 0x96,
                    0x0b, 0xd1, 0x38, 0xe5, 0x0d, 0x32, 0x11, 0x1e, 0x4c, 0xaf, 0x23, 0x7e, 0xe5,
                    0x3c, 0xa8, 0xad, 0x64, 0x26, 0x19, 0x4a, 0x88, 0x54, 0x5d, 0xdc, 0x49, 0x7a,
                    0x0b, 0x46, 0x6e, 0x7d, 0x6b, 0xbd, 0xb0, 0x04, 0x1b, 0x2f, 0x58, 0x6b,
                ],
            },
            TestVector {
                key: [
                    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,
                    0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
                    0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                ],
                nonce: [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                ],
                keystream: &[
                    0xf7, 0x98, 0xa1, 0x89, 0xf1, 0x95, 0xe6, 0x69, 0x82, 0x10, 0x5f, 0xfb, 0x64,
                    0x0b, 0xb7, 0x75, 0x7f, 0x57, 0x9d, 0xa3, 0x16, 0x02, 0xfc, 0x93, 0xec, 0x01,
                    0xac, 0x56, 0xf8, 0x5a, 0xc3, 0xc1, 0x34, 0xa4, 0x54, 0x7b, 0x73, 0x3b, 0x46,
                    0x41, 0x30, 0x42, 0xc9, 0x44, 0x00, 0x49, 0x17, 0x69, 0x05, 0xd3, 0xbe, 0x59,
                    0xea, 0x1c, 0x53, 0xf1, 0x59, 0x16, 0x15, 0x5c, 0x2b, 0xe8, 0x24, 0x1a, 0x38,
                    0x00, 0x8b, 0x9a, 0x26, 0xbc, 0x35, 0x94, 0x1e, 0x24, 0x44, 0x17, 0x7c, 0x8a,
                    0xde, 0x66, 0x89, 0xde, 0x95, 0x26, 0x49, 0x86, 0xd9, 0x58, 0x89, 0xfb, 0x60,
                    0xe8, 0x46, 0x29, 0xc9, 0xbd, 0x9a, 0x5a, 0xcb, 0x1c, 0xc1, 0x18, 0xbe, 0x56,
                    0x3e, 0xb9, 0xb3, 0xa4, 0xa4, 0x72, 0xf8, 0x2e, 0x09, 0xa7, 0xe7, 0x78, 0x49,
                    0x2b, 0x56, 0x2e, 0xf7, 0x13, 0x0e, 0x88, 0xdf, 0xe0, 0x31, 0xc7, 0x9d, 0xb9,
                    0xd4, 0xf7, 0xc7, 0xa8, 0x99, 0x15, 0x1b, 0x9a, 0x47, 0x50, 0x32, 0xb6, 0x3f,
                    0xc3, 0x85, 0x24, 0x5f, 0xe0, 0x54, 0xe3, 0xdd, 0x5a, 0x97, 0xa5, 0xf5, 0x76,
                    0xfe, 0x06, 0x40, 0x25, 0xd3, 0xce, 0x04, 0x2c, 0x56, 0x6a, 0xb2, 0xc5, 0x07,
                    0xb1, 0x38, 0xdb, 0x85, 0x3e, 0x3d, 0x69, 0x59, 0x66, 0x09, 0x96, 0x54, 0x6c,
                    0xc9, 0xc4, 0xa6, 0xea, 0xfd, 0xc7, 0x77, 0xc0, 0x40, 0xd7, 0x0e, 0xaf, 0x46,
                    0xf7, 0x6d, 0xad, 0x39, 0x79, 0xe5, 0xc5, 0x36, 0x0c, 0x33, 0x17, 0x16, 0x6a,
                    0x1c, 0x89, 0x4c, 0x94, 0xa3, 0x71, 0x87, 0x6a, 0x94, 0xdf, 0x76, 0x28, 0xfe,
                    0x4e, 0xaa, 0xf2, 0xcc, 0xb2, 0x7d, 0x5a, 0xaa, 0xe0, 0xad, 0x7a, 0xd0, 0xf9,
                    0xd4, 0xb6, 0xad, 0x3b, 0x54, 0x09, 0x87, 0x46, 0xd4, 0x52, 0x4d, 0x38, 0x40,
                    0x7a, 0x6d, 0xeb, 0x3a, 0xb7, 0x8f, 0xab, 0x78, 0xc9,
                ],
            },
        ];

        for tv in test_vectors.iter() {
            let mut c = ChaCha20::new(&tv.key, &tv.nonce);
            let input: Vec<u8> = repeat(0).take(tv.keystream.len()).collect();
            let mut output: Vec<u8> = repeat(0).take(input.len()).collect();
            c.process(&input[..], &mut output[..]);
            assert_eq!(output, tv.keystream);
        }
    }
}

#[cfg(all(test, feature = "with-bench"))]
mod bench {
    use super::ChaCha20;
    use test::Bencher;

    #[bench]
    pub fn chacha20_10(bh: &mut Bencher) {
        let mut chacha20 = ChaCha20::new(&[0; 32], &[0; 8]);
        let input = [1u8; 10];
        let mut output = [0u8; 10];
        bh.iter(|| {
            chacha20.process(&input, &mut output);
        });
        bh.bytes = input.len() as u64;
    }

    #[bench]
    pub fn chacha20_1k(bh: &mut Bencher) {
        let mut chacha20 = ChaCha20::new(&[0; 32], &[0; 8]);
        let input = [1u8; 1024];
        let mut output = [0u8; 1024];
        bh.iter(|| {
            chacha20.process(&input, &mut output);
        });
        bh.bytes = input.len() as u64;
    }

    #[bench]
    pub fn chacha20_64k(bh: &mut Bencher) {
        let mut chacha20 = ChaCha20::new(&[0; 32], &[0; 8]);
        let input = [1u8; 65536];
        let mut output = [0u8; 65536];
        bh.iter(|| {
            chacha20.process(&input, &mut output);
        });
        bh.bytes = input.len() as u64;
    }
}
